openapi: 3.0.0
info:
  description: "ガチャアプリ仕様"
  version: "1.0.1"
  title: "Gacha App"
tags:
- name: "user"
  description: "user関連"
- name: "gacha"
  description: "gacha関連"
paths:
  /users:
    post:
      tags:
      - "user"
      summary: "ユーザ登録"
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "405":
          description: "Invalid input"
  /users/{Id}:
    get:
      tags:
      - "user"
      summary: "ユーザ情報参照"
      description: "ユーザ情報を取得する"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/user"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "user not found"
      security:
      - api_key: []
    patch:
      tags:
      - "user"
      summary: "ユーザ情報変更"
      description: ""
      operationId: "updateUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user that needs to be updated "
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        description: User data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
        "405":
          description: "Validation exception"
    # patch:
    #   tags:
    #   - "user"
    #   summary: "パスワード変更"
    #   description: ""
    #   parameters:
    #   - name: "userId"
    #     in: "path"
    #     description: "ID of user that needs to be updated"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   requestBody:
    #     description: password
    #     content:
    #       application/json:
    #         schema:
    #           type: string
    #   responses:
    #     "405":
    #       description: "Invalid input"
    # delete:
    #   tags:
    #   - "user"
    #   summary: "ユーザ削除"
    #   description: ""
    #   parameters:
    #   - name: "api_key"
    #     in: "header"
    #     required: false
    #     type: "string"
    #   - name: "userId"
    #     in: "path"
    #     description: "user id to delete"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     "400":
    #       description: "Invalid ID supplied"
    #     "404":
    #       description: "user not found"
  # /user/login:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Logs user into the system"
  #     description: ""
  #     operationId: "loginUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "query"
  #       # queryだと名前とパスワードがURIに含まれるからよくないのではないか
  #       description: "The user name for login"
  #       required: true
  #       type: "string"
  #     - name: "password"
  #       in: "query"
  #       description: "The password for login in clear text"
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "string"
  #         headers:
  #           X-Rate-Limit:
  #             type: "integer"
  #             format: "int32"
  #             description: "calls per hour allowed by the user"
  #           X-Expires-After:
  #             type: "string"
  #             format: "date-time"
  #             description: "date in UTC when token expires"
  #       "400":
  #         description: "Invalid username/password supplied"
  # /user/logout:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Logs out current logged in user session"
  #     description: ""
  #     operationId: "logoutUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters: []
  #     responses:
  #       default:
  #         description: "successful operation"
  /users/{Id}/items:
    get:
      tags:
        - "user"
      summary: "ユーザ所持アイテム一覧"
      description: "ユーザが所持しているアイテム一覧情報を取得"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user that needs to be updated "
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "string"
  /gachas:
    get:
      tags:
      - "gacha"
      summary: "ガチャ一覧表示"
      description: ""
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
      security:
      - api_key: []
    post:
      tags:
      - "gacha"
      summary: "ガチャ作成"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      requestBody:
        required: true
        description: 作りたいガチャの情報
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/gacha"
      responses:
        "405":
          description: "Invalid input"
  /gachas/{Id}:
    get:
      tags:
      - "gacha"
      summary: "ガチャ詳細表示"
      description: ""
      parameters:
      - in: "path"
        description: "ID of gacha to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
      security:
      - api_key: []
    post:
      tags:
      - "gacha"
      summary: "ガチャ実行"
      description: "idで指定されたガチャを引いてアイテムを取得+手持ちのガチャコインを減らす"
      # どうやってガチャを引くユーザを取得するか？←headerでユーザIDとパスワード指定すれば認証できるみたい
      parameters:
      - in: "path"
        description: "ID of gacha to return"
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        description: "ガチャを引く回数"
        content:
          application/json:
            schema:
              type: interger
      responses:
        "200":
          description: "successful response"
    put:
      tags:
      - "gacha"
      summary: "ガチャ仕様変更"
      description: "ガチャIDで指定したガチャの情報を変更する"
      parameters:
      - in: "path"
        description: "ID of gacha to return"
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        description: "変えたいガチャの情報"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/gacha"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid"
    delete:
      tags:
      - "gacha"
      summary: "ガチャ削除"
      description: "選択したガチャを削除"
      parameters:
      - name: "gachaId"
      - in: "path"
        description: "ID of gacha that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
        minimum: 1.0
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "gacha not found"
  # /gachas/{Id}/items:
  #   get:
  #     tags:
  #       - "gacha"
  #     summary: "アイテム一覧"
  #     description: "ガチャに入っているアイテム一覧情報を取得"
  #     parameters:
  #     - name: "gachaId"
  #     - in: "path"
  #       description: "ID of gacha"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #       minimum: 1.0
  #     responses:
  #       200:
  #         description: "A successful response."
  #         schema:
  #           type: "string"
  /items/gachas/{Id}:
    post:
      summary: "アイテム追加"
      parameters:
      - name: "gachaId"
      - in: "path"
        description: "ID of gacha that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
        minimum: 1.0
      requestBody:
        description: "追加するアイテムの情報"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/item"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "string"

securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: interger
        name:
          type: string
        password:
          type: string
        mail:
          type: string
    gacha:
      type: object
      properties:
        name:
          description: "ガチャの名前"
          type: string
        userid:
          type: interger
        # items:
        #   description: "ガチャから出るアイテム"
        #   type: array #arrayでいいのか
        #   items:
        #     $ref: "#/components/schemas/gachaitem"
    gachaitems:
      type: object
      description: "ガチャに入ってるもの"
      properties:
        name:
          type: string
        rare:
          descriotion: "レア度を表すなにか"
          type: string
        gachaid:
          type: interger


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"