swagger: "2.0"
info:
  description: "ガチャアプリ仕様"
  version: "1.0.0"
  title: "Gacha App"
host: "userstore.swagger.io"
basePath: "/v2"
tags:
- name: "user"
  description: "user"
- name: "gacha"
  description: "gacha"
- name: "item"
  description: "item"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "ユーザ登録"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "userdata"
        description: "Userのデータ"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "405":
          description: "Invalid input"
      #security:
      #- userstore_auth:
      #  - "write:users"
      #  - "read:users"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "ユーザ情報参照"
      description: "ユーザ情報を返す"
      operationId: "getuserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/user"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "user not found"
      security:
      - api_key: []
    put:
      tags:
      - "user"
      summary: "ユーザ情報変更"
      description: ""
      operationId: "updateUser"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "userdata"
        description: "User object that needs to be update"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
        "405":
          description: "Validation exception"
      # security:
      # - userstore_auth:
      #   - "write:pets"
      #   - "read:pets"
    patch:
      tags:
      - "user"
      summary: "パスワード変更"
      description: ""
      operationId: "updateuserWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated password of the user"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "user"
      summary: "ユーザ削除"
      description: ""
      operationId: "deleteuser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "userId"
        in: "path"
        description: "user id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "user not found"
      # security:
      # - userstore_auth:
      #   - "write:users"
      #   - "read:users"
  # /user/login:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Logs user into the system"
  #     description: ""
  #     operationId: "loginUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "query"
  #       # queryだと名前とパスワードがURIに含まれるからよくないのではないか
  #       description: "The user name for login"
  #       required: true
  #       type: "string"
  #     - name: "password"
  #       in: "query"
  #       description: "The password for login in clear text"
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "string"
  #         headers:
  #           X-Rate-Limit:
  #             type: "integer"
  #             format: "int32"
  #             description: "calls per hour allowed by the user"
  #           X-Expires-After:
  #             type: "string"
  #             format: "date-time"
  #             description: "date in UTC when token expires"
  #       "400":
  #         description: "Invalid username/password supplied"
  # /user/logout:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Logs out current logged in user session"
  #     description: ""
  #     operationId: "logoutUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters: []
  #     responses:
  #       default:
  #         description: "successful operation"
  /gacha:
    get:
      tags:
      - "gacha"
      summary: "ガチャ一覧表示"
      description: ""
      operationId: ""
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
      security:
      - api_key: []
    post:
      tags:
      - "gacha"
      summary: "ガチャ作成"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "gachadata"
        description: "gachaのデータ"
        required: true
        schema:
          type: "object"
      responses:
        "405":
          description: "Invalid input"
  /gacha/{gachaId}:
    patch:
      tags:
      - "gacha"
      summary: "ガチャ実行"
      description: "idで指定されたガチャを引いてアイテムを取得+手持ちのガチャコインを減らす"
      # どうやってガチャを引くユーザを取得するか？←headerでユーザIDとパスワード指定すれば認証できるみたい
      operationId: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        description: "ID of gacha to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "header"
        name: "token"
        description: "認証トークン"
        required: true
        type: "string"
      - in: "body"
        name: ""
        description: ""
        required: true
        schema:
          type: "object"
      responses:
        "200":
          description: "successful response"
          # schema:
          #   $ref: "#/definitions/Order"
    put:
      tags:
      - "gacha"
      summary: "ガチャ仕様変更"
      description: "ガチャIDで指定したガチャの情報を変更する"
      operationId: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        description: "ID of gacha to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          type: "object"
      responses:
        "200":
          description: "successful operation"
          # schema:
          #   $ref: "#/definitions/Order"
        "400":
          description: "Invalid"
    delete:
      tags:
      - "gacha"
      summary: "ガチャ削除"
      description: "選択したガチャを削除"
      operationId: ""
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
      - in: "path"
        description: "ID of gacha that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
        minimum: 1.0
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "gacha not found"
  /items:
    get:
      tags:
        - "item"
      summary: "ユーザ所持アイテム一覧"
      description: "ユーザが所持しているアイテム一覧情報を取得"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "認証トークン"
          required: true
          type: "string"
      responses:
        200:
          "description": "A successful response."
          schema:
            type: "string"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"